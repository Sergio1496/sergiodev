---
import Layout from "../layouts/Layout.astro";
import { fade } from "astro:transitions";

const projects = [
  {
    title: "ReadWave (En desarrollo)",
    description:
      "En desarrollo. Esta aplicación permitirá a los usuarios descubrir nuevos libros y autores, usando una inteligencia artificial que recomendará nuevos libros basados en los gustos del usuario. Para ello haré uso de la api de google books y google recomendations ai para ajustar los gustos. También se hará uso de Appwrite",
    framework: "Flutter",
    fecha: "2024",
    empresa: "Hyliacom",
    empresaLink: "https://hyliacom.es/",
    image: "/images/readwave.webp",
    mobileImage: "/images/readwave-mobile.png",
    link: "https://sergioem.dev",
    skills: ["Flutter", "Dart"],
  },
  {
    title: "Red de pueblo",
    description:
      "Red de pueblo es una aplicación que permite a los usuarios de las zonas más rurales de España poder comunicarse, compartir servicios y consultar puntos de interés. He usado los mapas de google para geolocalizar los pois y un inicio de sesión con firebase para la autenticación de los usuarios.",
    framework: "Flutter",
    fecha: "2024",
    empresa: "Hyliacom",
    empresaLink: "https://hyliacom.es/",
    image: "/images/redpueblo.webp",
    mobileImage: "/images/redpueblo-mobile.png",
    link: "https://play.google.com/store/apps/details?id=com.hyliaapps.reddepueblo",
    skills: ["Flutter", "Dart"],
  },
  {
    title: "EasyClient: Gestión de tiendas",
    description:
      "Los clientes de Hyliacom pueden gestionar sus tiendas desde esta aplicación, pudiendo ver las ventas, productos y clientes junto con un chat de asistencia directa. Para la conexión del chat se ha usado una conexión con el webservice de Hyliacom.",
    framework: "Flutter",
    fecha: "2024",
    empresa: "Hyliacom",
    empresaLink: "https://hyliacom.es/",
    image: "/images/easyclient.webp",
    mobileImage: "/images/easyclient-mobile.png",
    link: "https://play.google.com/store/apps/details?id=com.hyliaapps.tiendaseasyclient",
    skills: ["Flutter", "Dart"],
  },
  {
    title: "EasyClient POS (En desarrollo)",
    description:
      "Aplicación de escritorio para la gestión de impresoras de tickets y etiquetas. Esta aplicación se conecta al framework de EasyClient mediante websockets en un servidor de Node.js para la impresión de tickets y etiquetas enviadas directamente desde la web.",
    framework: "Flutter Desktop",
    fecha: "2024",
    empresa: "Hyliacom",
    empresaLink: "https://hyliacom.es/",
    image: "/images/easyclient.webp",
    mobileImage: "/images/easyclientpos-mobile.png",
    skills: ["Flutter", "Dart"],
  },
  {
    title: "CRM Cafés Lúa",
    description:
      "Proyecto desarrollado para la empresa gallega Cafés Lúa. Se trata de un CRM para la gestión de citas y rutas de los comerciales y repartidores.",
    framework: "Flutter",
    fecha: "2023",
    empresa: "Hyliacom",
    empresaLink: "https://hyliacom.es/",
    image: "/images/lua.webp",
    mobileImage: "/images/lua-mobile.png",
    link: "https://play.google.com/store/apps/details?id=com.hyliaapps.cafeslua",
    skills: ["Flutter", "Dart"],
  },

  {
    title: "Maat Mirror",
    description:
      "Prototipo para ópticas que permite a los clientes probarse las gafas sin necesidad de hacerlo físicamente. Se usan tecnologias como Mlkit para el reconocimiento facial y DeepAR para el renderizado de las gafas.",
    framework: "Flutter",
    fecha: "2023",
    empresa: "Hyliacom",
    empresaLink: "https://hyliacom.es/",
    image: "/images/maatmirror.webp",
    mobileImage: "/images/maatmirror-mobile.png",
    link: "https://play.google.com/store/apps/details?id=com.hyliaapps.maatmirror",
    skills: ["Flutter", "Dart"],
  },
  {
    title: "Ana Simó Valencia Ultramar",
    description:
      "Pasteleria en Ferrol (A Coruña) con más de 50 años de experiencia. En esta app se puede ver el catalogo de productos con un diseño adaptado a tablets y móviles.",
    framework: "Flutter",
    fecha: "2023",
    empresa: "Hyliacom",
    empresaLink: "https://hyliacom.es/",
    image: "/images/valenciaultramar.webp",
    mobileImage: "/images/valenciaultramar-mobile.png",
    link: "https://play.google.com/store/apps/details?id=com.hyliaapps.valenciaultramar",
    skills: ["Flutter", "Dart"],
  },
];
---

<Layout title="Sergio Expósito Martínez | Proyectos">
  <section class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6 p-6">
    {
      projects.map((project, index) => (
        <div class="relative group fade-in" data-key={index}>
          {/* Diseño para móviles */}
          <div class="block md:hidden bg-black rounded-lg overflow-hidden">
            <img
              src={project.mobileImage}
              alt={project.title}
              class="object-cover w-full h-64"
            />
      <div class="p-4  relative">
        <!-- Move the input here so it's before the elements you want to control -->
        <input
          type="checkbox"
          id={`toggle-${index}`}
          class="hidden toggle-input"
        />

        <div class="flex justify-between items-start">
          <div>
            <h3 class="text-lg font-bold text-white">{project.title}</h3>
            <p class="text-sm text-gray-300">
              {project.framework} - {project.fecha}
            </p>
          </div>

          <div class="relative inline-flex right-2 top-2">
            <div class="absolute -inset-0.5 bg-gradient-to-r from-pink-600 to-purple-600 rounded-full blur opacity-100 transition duration-700 ease-in-out" />
            <label
              for={`toggle-${index}`}
              class="relative cursor-pointer text-white p-2 rounded-full transition-colors duration-300 text-sm flex items-center justify-center"
              style="background: linear-gradient(to right, #303030, #3a3a3a);"
            >
              <svg
                class="w-4 h-4 transition-transform duration-300"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M19 9l-7 7-7-7"
                />
              </svg>
            </label>
          </div>
        </div>

<div class="max-h-0 overflow-hidden transition-all duration-700 description-content">
  <p class="text-sm text-white mt-2">{project.description}</p>
  <div class="flex justify-end mr-2">
    <div class="relative inline-block mt-4 mb-2"> {/* Add relative positioning */}
      <div class="absolute -inset-0.5 bg-gradient-to-r from-pink-600 to-purple-600 rounded-full blur opacity-100 transition duration-700 ease-in-out" />
      <a
        href={project.link}
        target="_blank"
        class="relative inline-block px-6 py-2 bg-zinc-800 hover:bg-zinc-700 rounded-full text-white text-sm"
      >
        Ver Proyecto
      </a>
    </div>
  </div>
</div>
            </div>
          </div>

          {/* Diseño para escritorio */}
          <div class="hidden md:block relative group">
            <div class="absolute -inset-0.5 bg-gradient-to-r from-pink-600 to-purple-600 rounded-lg blur opacity-0 group-hover:opacity-100 transition duration-700 ease-in-out" />
            <a
              href={project.link}
              target="_blank"
              class="relative block bg-black rounded-lg overflow-hidden"
            >
              <img
                src={project.image}
                alt={project.title}
                class="object-cover w-full h-64 transition-transform duration-500 group-hover:scale-110 group-hover:blur-sm"
              />
              <div class="absolute inset-0 bg-gradient-to-t from-black via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500" />
              <div class="absolute inset-0 bg-black opacity-0 group-hover:opacity-50 transition-opacity duration-500" />
              <div class="absolute bottom-0 p-4 text-white opacity-0 group-hover:opacity-100 transition-opacity duration-500">
                <h3 class="text-lg font-bold">{project.title}</h3>
                <p class="text-sm">
                  {project.framework} - {project.fecha}
                </p>
                <p class="text-sm">{project.description}</p>
              </div>
            </a>
          </div>
        </div>
      ))
    }
  </section>
</Layout>

<style>
  /* Existing animation styles */
  .description-content {
  @apply max-h-0 overflow-hidden transition-all duration-700;
}

.toggle-input:checked ~ .description-content {
  @apply max-h-96; /* Ajusta este valor según sea necesario */
}

.toggle-input:checked ~ .flex label svg {
  @apply transform rotate-180;
}

  /* Modify arrow rotation to work with new structure */
  .toggle-input:checked ~ div label svg {
    transform: rotate(180deg);
  }

  /* Keep existing fade-in styles */
  .fade-in {
    opacity: 0;
    transform: translateY(20px);
    transition:
      opacity 0.6s ease-out,
      transform 0.6s ease-out;
  }

  .fade-in.visible {
    opacity: 1;
    transform: translateY(0);
  }

  /* Add these new styles */
  .flex-container {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    width: 100%;
    margin-bottom: 1rem;
  }

  .title-container {
    flex: 1;
    margin-right: 1rem;
  }

  .toggle-button {
    position: relative;
    z-index: 1;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const faders = document.querySelectorAll(".fade-in");

    const options = {
      threshold: 0.1,
    };

    const appearOnScroll = new IntersectionObserver(function (
      entries,
      observer
    ) {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add("visible");
          observer.unobserve(entry.target);
        }
      });
    }, options);

    faders.forEach((fader) => {
      appearOnScroll.observe(fader);
    });

    // Cambiar el texto del botón "Leer más" a "Leer menos"
    const toggleInputs = document.querySelectorAll(".toggle-input");
    toggleInputs.forEach((input) => {
      input.addEventListener("change", (e) => {
        const label = (e.target as HTMLInputElement).nextElementSibling;
        if (label) {
          const svg = label.querySelector("svg");
          if ((e.target as HTMLInputElement).checked) {
            if (svg) {
              svg.style.transform = "rotate(180deg)";
            }
          } else {
            if (svg) {
              svg.style.transform = "rotate(0deg)";
            }
          }
        }
      });
    });
  });
</script>
