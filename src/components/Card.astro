---
import Flutter from "../components/svg/Flutter.astro";
import Ionic from "../components/svg/Ionic.astro";
import Astrobuild from "./svg/Astrobuild.astro";
import React from "../components/svg/React.astro";
import Angular from "../components/svg/Angular.astro";
import Laravel from "../components/svg/Laravel.astro";
import Dart from "../components/svg/Dart.astro";
import Typescript from "../components/svg/Typescript.astro";
import Javascript from "../components/svg/Javascript.astro";
import Php from "../components/svg/Php.astro";
import Python from "../components/svg/Python.astro";
import Sql from "../components/svg/Sql.astro";

const {
  title,
  description,
  framework,
  fecha,
  empresa,
  empresaLink,
  image,
  link,
  skills,
} = Astro.props;
---

<div class="max-w-3xl w-full mx-auto z-10">
  <div class="flex flex-col">
    <div
      class="bg-zinc-800 border border-gray-900 shadow-lg rounded-3xl p-4 m-4 transition-transform duration-500 ease-in-out transform hover:-translate-y-2"
      style={{ boxShadow: "0 10px 15px rgba(0, 0, 0, 0.5)" }}
    >
      <div class="flex-none sm:flex">
        <div
          class="relative h-32 w-32 sm:mb-0 mb-3 flex-shrink-0 justify-center items-center mx-auto"
        >
          <picture class="rounded-lg overflow-hidden block">
            <img
              src={image}
              alt="aji"
              class="w-32 h-32 object-cover hover:scale-110 ease-in duration-150"
            />
          </picture>
        </div>
        <div class="flex-auto sm:ml-5 justify-evenly">
          <div class="flex items-center justify-between sm:mt-2">
            <div class="flex items-center">
              <div class="flex flex-col">
                <div
                  class="w-full flex-none text-lg text-gray-200 font-bold leading-none justify-center text-center mx-auto sm:text-left"
                >
                  {title}
                </div>

                <div
                  class="flex-auto text-gray-400 my-1 justify-center items-center mx-auto sm:items-start sm:justify-start sm:mx-0"
                >
                  <span class="mr-3">{framework}</span><span
                    class="mr-3 border-r border-gray-600 max-h-0"></span><span
                    ><a
                      class="hover:text-red-500"
                      target="_blank"
                      href={empresaLink}
                    >
                      {empresa}</a
                    > - {fecha}</span
                  >
                </div>
                <div
                  class="text-gray-400 text-sm mt-2 pointer-events-none text-pretty"
                >
                  {description}
                </div>
              </div>
            </div>
          </div>
          <div class="flex flex-row items-center">
            <div class="flex-1 hidden items-center"></div>
          </div>
          <div class="flex pt-2 text-sm text-gray-400">
            <div class="flex-1 inline-flex items-center">
              <p>
                {
                  skills.map((skill: any) => {
                    let SkillComponent;
                    switch (skill) {
                      case "Flutter":
                        SkillComponent = Flutter;
                        break;
                      case "Ionic":
                        SkillComponent = Ionic;
                        break;
                      case "React":
                        SkillComponent = React;
                        break;
                      case "Angular":
                        SkillComponent = Angular;
                        break;
                      case "Laravel":
                        SkillComponent = Laravel;
                        break;
                      case "Astrobuild":
                        SkillComponent = Astrobuild;
                        break;
                      case "Dart":
                        SkillComponent = Dart;
                        break;
                      case "TypeScript":
                        SkillComponent = Typescript;
                        break;
                      case "Javascript":
                        SkillComponent = Javascript;
                        break;
                      case "Php":
                        SkillComponent = Php;
                        break;
                      case "Python":
                        SkillComponent = Python;
                        break;
                      case "Sql":
                        SkillComponent = Sql;
                        break;

                      default:
                        SkillComponent = "Sin framework";
                        break;
                    }
                    return (
                      <SkillComponent
                        size="h-6 w-6 mr-2"
                        color="true"
                        title={skill}
                      />
                    );
                  })
                }
              </p>
            </div>

            <!--            {
              tieneImagenes == true ? (
                <button
                  class="relative outline-none inline-flex items-center justify-center px-4 py-3 text-md font-josefinMedium text-white transition-all duration-200 font-pj rounded-xl focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-900"
                  onclick="document.getElementById('myModal').showModal()"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="icon icon-tabler icon-tabler-slideshow"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    stroke-width="1.5"
                    stroke="#ffffff"
                    fill="none"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                    <path d="M15 6l.01 0" />
                    <path d="M3 3m0 3a3 3 0 0 1 3 -3h12a3 3 0 0 1 3 3v8a3 3 0 0 1 -3 3h-12a3 3 0 0 1 -3 -3z" />
                    <path d="M3 13l4 -4a3 5 0 0 1 3 0l4 4" />
                    <path d="M13 12l2 -2a3 5 0 0 1 3 0l3 3" />
                    <path d="M8 21l.01 0" />
                    <path d="M12 21l.01 0" />
                    <path d="M16 21l.01 0" />
                  </svg>
                </button>
              ) : (
                ""
              )
            } -->
            <div class="relative inline-flex group">
              <div
                class="absolute transition-all duration-1000 opacity-70 -inset-px bg-gradient-to-r from-[#44BCFF] via-[#FF44EC] to-[#FF675E] rounded-xl blur-lg filter group-hover:opacity-100 group-hover:-inset-1 group-hover:duration-200 ml-4 mt-2 w-8 h-8"
              >
              </div>
              <a href={link} target="_blank">
                <button
                  class="relative inline-flex items-center justify-center px-4 py-3 text-md font-josefinMedium text-white transition-all duration-200 font-pj rounded-xl focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-900"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="ml-2"
                    width="18"
                    height="18"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                    stroke-width="2"
                    fill="none"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    ><path stroke="none" d="M0 0h24v24H0z" fill="none"
                    ></path><path
                      d="M11 7h-5a2 2 0 0 0 -2 2v9a2 2 0 0 0 2 2h9a2 2 0 0 0 2 -2v-5"
                    ></path><line x1="10" y1="14" x2="20" y2="4"
                    ></line><polyline points="15 4 20 4 20 9"></polyline></svg
                  ></button
                >
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- <dialog
  id="myModal"
  class="h-auto w-auto p-5 bg-transparent rounded-md border-none outline-none"
>
  <div class="flex flex-col w-full h-auto">

    <div class="flex w-full h-auto justify-center items-center">
      <div
        onclick="document.getElementById('myModal').close(); "
        class="flex w-auto h-auto justify-end cursor-pointer"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="#fff"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="feather feather-x"
          ><line x1="18" y1="6" x2="6" y2="18"></line><line
            x1="6"
            y1="6"
            x2="18"
            y2="18"></line></svg
        >
      </div>
   
    </div>
   
    <div
      class="flex w-full h-auto py-10 px-2 justify-center items-center rounded text-center text-gray-500"
    >
   
      <div class="grid grid-cols-1 gap-4">
        <div
          class="relative mx-auto border-black dark:border-black bg-black border-[14px] rounded-[2.5rem] h-[600px] w-[300px] shadow-xl"
        >
          <div
            class="w-[148px] h-[18px] bg-black top-0 rounded-b-[1rem] left-1/2 -translate-x-1/2 absolute"
          >
          </div>
          <div
            class="h-[46px] w-[3px] bg-black absolute -start-[17px] top-[124px] rounded-s-lg"
          >
          </div>
          <div
            class="h-[46px] w-[3px] bg-black absolute -start-[17px] top-[178px] rounded-s-lg"
          >
          </div>
          <div
            class="h-[64px] w-[3px] bg-black absolute -end-[17px] top-[142px] rounded-e-lg"
          >
          </div>
          <div
            class="rounded-[2rem] overflow-hidden w-[272px] h-[572px] bg-white dark:bg-black"
          >
            <div class="slider absolute">
              {
                arrayImagenes &&
                  arrayImagenes.map((image: any, index: any) => (
                    <>
                      {console.log(image)}
                      <input
                        type="radio"
                        name="slider"
                        id={`slide${index}`}
                        checked={index === 0}
                        class="sr-only  slide-input"
                      />
                      <div
                        class={`slide absolute w-full h-full opacity-0 transition-opacity duration-500 ease-in-out ${
                          index === 0 ? "opacity-100" : ""
                        }`}
                      >
                        <img
                          src={image}
                          alt=""
                          class="w-full h-full object-cover"
                        />
                      </div>
                    </>
                  ))
              }
            </div>
          </div>
        </div>
        {
          arrayImagenes &&
            arrayImagenes.map((_: any, index: any) => (
              <label
                for={`slide${index}`}
                class={`absolute top-1/2 transform -translate-y-1/2 bg-white p-2 rounded-full cursor-pointer slider-control ${
                  index === 0 ? "slider-control-prev" : "slider-control-next"
                } z-50`}
                style={{
                  left: index === 0 ? 0 : "auto",
                  right: index === 0 ? "auto" : 0,
                }}
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                  class="h-6 w-6"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d={index === 0 ? "M15 19l-7-7 7-7" : "M9 5l7 7-7 7"}
                  />
                </svg>
              </label>
            ))
        }
      </div>
    </div>
  </div>
</dialog> -->

<!-- <style>
  dialog[open] {
    animation: appear 0.15s ease-in-out;
    overflow-y: hidden;
  }

  dialog::backdrop {
    background: linear-gradient(
      45deg,
      rgba(0, 0, 0, 0.5),
      rgba(54, 54, 54, 0.5)
    );
    backdrop-filter: blur(3px);
  }

  @keyframes appear {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  
  .slider {
    position: relative;
    width: 100%;
    height: 100%;
  }

  .slide {
    position: absolute;
    transition: opacity 1s;
  }

  .slider-control {
    position: absolute;
    top: 45%;
    margin-left: 38%;
    margin-right: 38%;
    transform: translateY(-50%);
    transition: transform 0.3s ease-in-out;
  }

  .slider-control:hover {
    transform: translateY(-50%) scale(1.1);
  }

  @media (max-width: 768px) {
    .slider-control {
      margin-left: 20%;
      margin-right: 20%;
      top: 90%;
    }
  } 
  /* Estiliza las etiquetas de los radios */
</style> -->

<!-- <script>
  let currentIndex = 0;
  function init() {
    const sliderContainer = document.querySelector(".slider");
    const radios = sliderContainer!.querySelectorAll(
      'input[type="radio"][name="slider"]'
    );

    const slides = document.querySelectorAll(".slide");
    const prevControl = document.querySelector(".slider-control-prev");
    const nextControl = document.querySelector(".slider-control-next");
    slides.forEach((slide, i) => {
      slide.style.opacity = i === currentIndex ? "100" : "0";
    });

    prevControl.addEventListener("click", () => {
      currentIndex = currentIndex === 0 ? radios.length - 1 : currentIndex - 1;
    });

    nextControl.addEventListener("click", () => {
      currentIndex = currentIndex === radios.length - 1 ? 0 : currentIndex + 1;
    });

    console.log(radios);
  }

  init();

  document.addEventListener("astro:after-swap", () => {
    init();
  });
</script>
 -->
